import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as i,c as o,a as e,d as a,e as c,b as l}from"./app-C-ZhEtg7.js";const m={},s={href:"https://dzone.com/articles/best-practices-java-memory-arguments-for-container",target:"_blank",rel:"noopener noreferrer"},p=l('<p><strong>TL;DR</strong></p><p>简而言之，在容器内有3组参数来设置 JVM 的最大堆内存：</p><ol><li>-XX:MaxRAMFraction, -XX:MinRAMFraction</li><li>-XX:MaxRAMPercentage, -XX:MinRAMPercentage</li><li>-Xmx</li></ol><p>应该怎么使用？</p><h2 id="_1-xx-maxramfraction-xx-minramfraction" tabindex="-1"><a class="header-anchor" href="#_1-xx-maxramfraction-xx-minramfraction"><span>1 -XX:MaxRAMFraction, -XX:MinRAMFraction</span></a></h2><div class="hint-container tip"><p class="hint-container-title">支持版本：only Java 8 update 131 to Java 8 update 190</p></div><p>局限：</p><ol><li>同时要设置参数<code>-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap</code>，代表 JVM 将以容器的内存设置为准来分配最大堆内存，不然就会以宿主机的内存为准分配最大堆内存</li><li>-XX:MaxRAMFraction 只能识别整数的设置，如果设置<code>-XX:MaxRAMFraction=2.5</code>将会无法启动 JVM</li><li>后续的 JDK 版本就不支持了</li></ol><p>举例：</p><p>如果容器分配内存为 1GB, 设置 -XX:MaxRAMFraction=2，则 JVM 最大堆内存分配约为最大可用内存的 1/2(约512G).</p><h2 id="_2-xx-maxrampercentage-xx-minrampercentage" tabindex="-1"><a class="header-anchor" href="#_2-xx-maxrampercentage-xx-minrampercentage"><span>2 -XX:MaxRAMPercentage, -XX:MinRAMPercentage</span></a></h2><div class="hint-container tip"><p class="hint-container-title">支持版本：from Java 8 update 191 and above.</p></div><p><code>-XX:+UseContainerSupport</code>这个参数这这些支持的版本中已经默认开启了，不需要再显示设置。</p><p>局限：不支持更老的版本</p><p>举例：</p><p>如果容器分配内存为 1GB, 设置 -XX:MaxRAMPercentage=50，则 JVM最大堆为 1GB*50%</p><h2 id="_3-xmx" tabindex="-1"><a class="header-anchor" href="#_3-xmx"><span>3 -Xmx</span></a></h2><p>直接设置 JVM 的最大堆内存值</p><div class="hint-container tip"><p class="hint-container-title">支持版本：all</p></div><p>局限：</p><ol><li>如果你直接使用 -Xmx 来设置最大堆内存，当 JVM 内存超过 容器的内存限制，会遇到 OOM 或直接被 Kill掉</li></ol><h2 id="实践建议" tabindex="-1"><a class="header-anchor" href="#实践建议"><span>实践建议</span></a></h2><ol><li>不管怎么设置最大堆的内存，记得留至少 25% 或更多的内存，因为JVM 运行时不止有堆内存，还有每个线程栈，内地内存，socket buffer 等等内存消耗</li><li>如果一个容器里面只有一个 Java 应用在跑，把初始堆大小和最大堆大小设置为一样，避免 JVM扩容导致 JVM 暂停。如果初始内存设置的内存大于容器限制，JVM 甚至不会启动，在一开始就发现问题</li></ol>',23);function x(d,M){const n=r("ExternalLinkIcon");return i(),o("div",null,[e("blockquote",null,[e("p",null,[a("参考："),e("a",s,[a("Best Practices: Java Memory Arguments for Containers - DZone Java"),c(n)])])]),p])}const f=t(m,[["render",x],["__file","jvm-memory-in-container.html.vue"]]),g=JSON.parse('{"path":"/ARTS/jvm-memory-in-container.html","title":"容器内 JVM 内存设置最佳实践","lang":"zh-CN","frontmatter":{"title":"容器内 JVM 内存设置最佳实践","date":"2021-01-08T00:00:00.000Z","category":["编程技术","ARTS"],"tags":["TIPS","JVM","Docker"]},"headers":[{"level":2,"title":"1 -XX:MaxRAMFraction, -XX:MinRAMFraction","slug":"_1-xx-maxramfraction-xx-minramfraction","link":"#_1-xx-maxramfraction-xx-minramfraction","children":[]},{"level":2,"title":"2 -XX:MaxRAMPercentage, -XX:MinRAMPercentage","slug":"_2-xx-maxrampercentage-xx-minrampercentage","link":"#_2-xx-maxrampercentage-xx-minrampercentage","children":[]},{"level":2,"title":"3 -Xmx","slug":"_3-xmx","link":"#_3-xmx","children":[]},{"level":2,"title":"实践建议","slug":"实践建议","link":"#实践建议","children":[]}],"git":{"createdTime":1663489876000,"updatedTime":1712909929000,"contributors":[{"name":"LiuKay","email":"kayfen@foxmail.com","commits":1},{"name":"LiuKay","email":"passionno1@qq.com","commits":1}]},"readingTime":{"minutes":1.75,"words":524},"filePathRelative":"ARTS/jvm-memory-in-container.md","localizedDate":"2021年1月8日","excerpt":"<blockquote>\\n<p>参考：<a href=\\"https://dzone.com/articles/best-practices-java-memory-arguments-for-container\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Best Practices: Java Memory Arguments for Containers - DZone Java</a></p>\\n</blockquote>\\n<p><strong>TL;DR</strong></p>\\n<p>简而言之，在容器内有3组参数来设置 JVM 的最大堆内存：</p>"}');export{f as comp,g as data};
