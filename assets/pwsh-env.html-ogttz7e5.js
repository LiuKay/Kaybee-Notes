import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,b as t}from"./app-Dl2VIqMH.js";const o="/assets/windows_terminal_proxy-DfJMb_0Q.png",e={},p=t(`<blockquote><p>问题： 在使用一些代理工具开启代理之后，windows 系统的命令行工具，诸如 terminal, cmd, powershell 默认是不会走代理，需要在环境变量中配置http/https 代理地址，但是有时候不是一直开着代理在跑，有时候也需要不开代理跑命令行，我又不想再设置一下环境变量，那怎么办呢？</p></blockquote><p>可以在 Windows Terminal 上面新建一个配置, 在这个配置中默认开启代理，这样当我需要代理的时候，直接打开这个 Tab 弹出的命令行就可以直接使用了。</p><p>所以我们可以这样复制一个 Powershell 的配置(其他命令行类似)，然后在启动命令中加入配置代理：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;commandline&quot;</span><span class="token operator">:</span> <span class="token string">&quot;C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe -NoExit -Command \\&quot;&amp; {$env:HTTP_PROXY=&#39;http://127.0.0.1:10809&#39;;$env:HTTPS_PROXY=&#39;http://127.0.0.1:10809&#39;}\\&quot; &quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;guid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{91dcdcec-b2d8-4317-9e87-2000791226b3}&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">&quot;icon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ms-appx:///ProfileIcons/pwsh.png&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ps_proxy&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;startingDirectory&quot;</span><span class="token operator">:</span> <span class="token string">&quot;D:\\\\&quot;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>$env:HTTP_PROXY=&#39;http://127.0.0.1:10809&#39;</code> 就是设置环境变量，该变量只在当前的 Powershell session 中生效，不影响其他的命令行工具，这样就能随取随用了。</p><p><img src="`+o+`" alt="windows_terminal_proxy" loading="lazy"></p><h3 id="git-bash-with-proxy" tabindex="-1"><a class="header-anchor" href="#git-bash-with-proxy"><span>Git bash with Proxy</span></a></h3><p>要在Windows Terminal中新建一个设置了代理的Git Bash，请按照以下步骤操作：</p><ol><li><p>打开Windows Terminal。</p></li><li><p>点击下拉箭头，然后选择“设置”(Settings)。这将打开Windows Terminal的设置JSON文件。</p></li><li><p>在&quot;profiles&quot; &gt; &quot;list&quot;部分，添加一个新的配置对象，如下所示：</p></li></ol><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;guid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{GUID}&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Git Bash with Proxy&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;commandline&quot;</span><span class="token operator">:</span> <span class="token string">&quot;C:/Program Files/Git/bin/bash.exe --login -i -c \\&quot;export HTTP_PROXY=http://username:password@proxy-server:port; export HTTPS_PROXY=https://username:password@proxy-server:port; exec bash\\&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;icon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;C:/Program Files/Git/mingw64/share/git/git-for-windows.ico&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请确保：将{GUID}替换为一个唯一的GUID。您可以使用在线生成器（如<code>https://www.guidgenerator.com/</code>）生成GUID。</p><p>根据实际情况替换username、password、proxy-server和port为您的代理服务器详细信息。如果代理服务器不需要身份验证，只需省略username:password@部分。如果你的Git安装路径与示例不同，请相应地修改&quot;commandline&quot;和&quot;icon&quot;中的路径。</p><p>最后保存并关闭设置JSON文件，返回Windows Terminal，点击下拉箭头，你应该能看到一个名为&quot;Git Bash with Proxy&quot;的新配置选项。选择它，将打开一个设置了代理的Git Bash实例。</p>`,13),i=[p];function r(l,c){return n(),a("div",null,i)}const m=s(e,[["render",r],["__file","pwsh-env.html.vue"]]),h=JSON.parse('{"path":"/ARTS/pwsh-env.html","title":"在 Windows Terminal 中建一个有代理能力的配置","lang":"zh-CN","frontmatter":{"title":"在 Windows Terminal 中建一个有代理能力的配置","date":"2022-11-25T00:00:00.000Z","category":["博客","Tips"],"tag":["Tips"]},"headers":[{"level":3,"title":"Git bash with Proxy","slug":"git-bash-with-proxy","link":"#git-bash-with-proxy","children":[]}],"git":{"createdTime":1669452592000,"updatedTime":1685956643000,"contributors":[{"name":"LiuKay","email":"kayfen@foxmail.com","commits":4},{"name":"Kaybee","email":"kai.liu@lseg.com","commits":1}]},"readingTime":{"minutes":1.97,"words":592},"filePathRelative":"ARTS/pwsh-env.md","localizedDate":"2022年11月25日","excerpt":"<blockquote>\\n<p>问题： 在使用一些代理工具开启代理之后，windows 系统的命令行工具，诸如 terminal, cmd, powershell 默认是不会走代理，需要在环境变量中配置http/https 代理地址，但是有时候不是一直开着代理在跑，有时候也需要不开代理跑命令行，我又不想再设置一下环境变量，那怎么办呢？</p>\\n</blockquote>\\n<p>可以在 Windows Terminal 上面新建一个配置, 在这个配置中默认开启代理，这样当我需要代理的时候，直接打开这个 Tab 弹出的命令行就可以直接使用了。</p>\\n<p>所以我们可以这样复制一个 Powershell 的配置(其他命令行类似)，然后在启动命令中加入配置代理：</p>"}');export{m as comp,h as data};
