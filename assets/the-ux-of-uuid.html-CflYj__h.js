import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as d,c as o,a as e,d as n,e as t,b as s}from"./app-6KSEf1k3.js";const r={},c={href:"https://unkey.dev/blog/uuid-ux",target:"_blank",rel:"noopener noreferrer"},u=s(`<p><strong>TLDR;</strong><br> 使用下列方式来改进 UUID 的用户体验：</p><ol><li>使 UUID 易于复制(Copy)</li><li>添加前缀易于识别和分类</li><li>使用更高效的编码方式，比如 Base58</li><li>可以改变长度来提高重复率</li></ol><h2 id="uuid-难以复制" tabindex="-1"><a class="header-anchor" href="#uuid-难以复制"><span>UUID 难以复制</span></a></h2><p>UUID 在很多系统中使用的十分普遍，在我经历过的几个项目中，经常遇到需要 Copy UUID 到 Postman 来发送请求或者是到 Datadog 这样监控平台去查询日志等情形，这个时候很烦的一点就是 UUID 没法鼠标双击就选中了，原因就是它中间包含的中划线 (&quot;-&quot;), 你可以试试去复制下面的这个 ID。</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>4c5fb787-48ce-4b6e-ab8c-3c4f23590b27
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一个简单的做法就是去除 UUID 中间的&quot;-&quot;, 这样双击就直接选中了。</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>4c5fb78748ce4b6eab8c3c4f23590b27
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>public static String uuid(){  
	String id = UUID.randomUUID().toString();  
	return id.replace(&quot;-&quot;, &quot;&quot;);  
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="前缀" tabindex="-1"><a class="header-anchor" href="#前缀"><span>前缀</span></a></h2><p>给唯一 ID 加上前缀是一个好的实践，这样可读性更强，使用的时候也更明确。我以前参与的一个项目也给 ID 加了前缀，但是这个前缀是全局同一的，所以所有的ID 都是这个前缀，这样的话其实加了跟没加一样，所以在前缀中又加了一个数字来表达 ID 的类型，比如用户是 1，订单是 2。不过我觉得这样其实也不直观。最简单直观的方式还是加英文缩写前缀，比如 OpenAI 的 API Key那样，<code>sk_xxxxxxxxxxx</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>usr_123456789
ord_234567890
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="base58-编码" tabindex="-1"><a class="header-anchor" href="#base58-编码"><span>Base58 编码</span></a></h2>`,12),p={href:"https://wyhaines.io/base58-what-is-it-why-use-it",target:"_blank",rel:"noopener noreferrer"},v=s(`<p>Base58 编码在 Web3 里面用的比较多，比如比特币，区块链里面。</p><p>简而言之就是，Base58 编码具有更好的可读性，能区分因为字符导致的误读，比如&quot;I&quot;和&quot;l&quot;(一个大写的i, 一个是小写的L)，同时能够以更短的字符包含更多的信息。比如文章的原话是说</p><blockquote><p>例如，8 个字符长的 base58 字符串可以存储的状态数量大约是 8 个字符的十六进制字符串的 30,000 倍。在 16 个字符的情况下，base58 字符串可以存储 889.054.070 个组合</p></blockquote><p>拿 JS 的库来说，</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> customAlphabet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;nanoid&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> nanoid <span class="token operator">=</span> <span class="token function">customAlphabet</span><span class="token punctuation">(</span><span class="token string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">prefix_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">nanoid</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token comment">// prefix_KSPKGySWPqJWWWa37RqGaX</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),b={href:"https://bitcoinj.org/javadoc/0.14/org/bitcoinj/core/Base58.html",target:"_blank",rel:"noopener noreferrer"},m=s(`<div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>public final class Base58 {  

private static final char[] ALPHABET = &quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;.toCharArray();  
private static final SecureRandom RANDOM = new SecureRandom();  
  
	private Base58() {  
	//no-op  
	}  
  
	public static String randomString(int length) {  
		char[] result = new char[length];  
		  
		for(int i = 0; i &lt; length; ++i) {  
			char pick = ALPHABET[RANDOM.nextInt(ALPHABET.length)];  
			result[i] = pick;  
		}  
	  
		return new String(result);  
	}  
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="改变长度来提高重复率" tabindex="-1"><a class="header-anchor" href="#改变长度来提高重复率"><span>改变长度来提高重复率</span></a></h2><p>使用 Base58 编码可以指定base 长度，根据不同的长度来生成 ID，长度越长当然唯一性越高。</p><table><thead><tr><th>Length</th><th>Example</th><th>Total States</th></tr></thead><tbody><tr><td>nanoid(8)</td><td>re6ZkUUV</td><td>1.3e+14</td></tr><tr><td>nanoid(12)</td><td>pfpPYdZGbZvw</td><td>1.4e+21</td></tr><tr><td>nanoid(16)</td><td>sFDUZScHfZTfkLwk</td><td>1.6e+28</td></tr><tr><td>nanoid(24)</td><td>u7vzXJL9cGqUeabGPAZ5XUJ6</td><td>2.1e+42</td></tr><tr><td>nanoid(32)</td><td>qkvPDeH6JyAsRhaZ3X4ZLDPSLFP7MnJz</td><td>2.7e+56</td></tr></tbody></table>`,4);function h(g,k){const a=l("ExternalLinkIcon");return d(),o("div",null,[e("blockquote",null,[e("p",null,[e("a",c,[n("The UX of UUIDs | Unkey"),t(a)])])]),u,e("blockquote",null,[e("p",null,[e("a",p,[n("Base58 - What Is it? Why Use It? (wyhaines.io)"),t(a)])])]),v,e("p",null,[n("我实际没找到（Google） Java 相关的 Base58 编码比较权威的库，一个比较还算靠谱的是 Testcontainers 的工具类里面有一个简单的实现。然后还有 "),e("a",b,[n("Base58 (bitcoinj 0.14 API)"),t(a)])]),m])}const f=i(r,[["render",h],["__file","the-ux-of-uuid.html.vue"]]),_=JSON.parse('{"path":"/ARTS/the-ux-of-uuid.html","title":"UUID 的用户体验","lang":"zh-CN","frontmatter":{"title":"UUID 的用户体验","date":"2024-04-12T00:00:00.000Z","category":["ARTS"],"tag":["ARTS","TIPS"]},"headers":[{"level":2,"title":"UUID 难以复制","slug":"uuid-难以复制","link":"#uuid-难以复制","children":[]},{"level":2,"title":"前缀","slug":"前缀","link":"#前缀","children":[]},{"level":2,"title":"Base58 编码","slug":"base58-编码","link":"#base58-编码","children":[]},{"level":2,"title":"改变长度来提高重复率","slug":"改变长度来提高重复率","link":"#改变长度来提高重复率","children":[]}],"git":{"createdTime":1712911367000,"updatedTime":1712911367000,"contributors":[{"name":"LiuKay","email":"passionno1@qq.com","commits":1}]},"readingTime":{"minutes":2.61,"words":782},"filePathRelative":"ARTS/the-ux-of-uuid.md","localizedDate":"2024年4月12日","excerpt":"<blockquote>\\n<p><a href=\\"https://unkey.dev/blog/uuid-ux\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">The UX of UUIDs | Unkey</a></p>\\n</blockquote>\\n<p><strong>TLDR;</strong><br>\\n使用下列方式来改进 UUID 的用户体验：</p>\\n<ol>\\n<li>使 UUID 易于复制(Copy)</li>\\n<li>添加前缀易于识别和分类</li>\\n<li>使用更高效的编码方式，比如 Base58</li>\\n<li>可以改变长度来提高重复率</li>\\n</ol>"}');export{f as comp,_ as data};
